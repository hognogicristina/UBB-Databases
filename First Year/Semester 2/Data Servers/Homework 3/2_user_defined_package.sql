-------------------------------------------------------------------------------------------------------------------------------------------------
-- Display data from the views created in point 1, with the data being filtered based on at least two input parameters.
-------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE PKG_STUDENT_UTILS AS
    -- This package contains procedures to display student information, average information, and top 3 students by group.
    PROCEDURE SHOW_STUDENTS_INFO(P_SECTION_CODE IN NUMBER, P_YEAR IN NUMBER);
    PROCEDURE SHOW_AVERAGE_INFO(P_SECTION_NAME IN VARCHAR2, P_GROUP IN VARCHAR2);
    PROCEDURE SHOW_TOP3_BY_GROUP(P_GROUP IN VARCHAR2, P_MIN_AVERAGE IN NUMBER);
    PROCEDURE LOG_ACTION(P_FUNCTION_NAME IN VARCHAR2, P_START_TIME IN TIMESTAMP, P_END_TIME IN TIMESTAMP,
                         P_STATUS IN VARCHAR2, P_ERROR_MESSAGE IN VARCHAR2);
END PKG_STUDENT_UTILS;

-------------------------------------------------------------------------------------------------------------------------------------------------
--  Include a logging/journaling function (inserting records into a table named journal or log), triggered at the beginning and/or end
--  of each function/procedure call from point a.
-------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE LOG_JURNAL
(
    ID            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FUNCTION_NAME VARCHAR2(100),
    START_TIME    TIMESTAMP,
    END_TIME      TIMESTAMP,
    DURATION_SEC  NUMBER(10, 4),
    STATUS        VARCHAR2(20),
    ERROR_MESSAGE VARCHAR2(4000)
);

-------------------------------------------------------------------------------------------------------------------------------------------------
-- This function must be able to calculate the execution duration and log whether the
-- execution was successful or ended with an error. The table must store details about the function executed, the duration, whether the
-- execution was a success or an error, and the error message if applicable.
-------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE BODY PKG_STUDENT_UTILS AS
    -- This procedure logs the action performed, including the function name, start and end time, duration, status, and error message if any.
    PROCEDURE LOG_ACTION(P_FUNCTION_NAME IN VARCHAR2, P_START_TIME IN TIMESTAMP, P_END_TIME IN TIMESTAMP,
                         P_STATUS IN VARCHAR2, P_ERROR_MESSAGE IN VARCHAR2) IS
        PRAGMA AUTONOMOUS_TRANSACTION; -- Allows this procedure to commit independently
    BEGIN
        INSERT INTO LOG_JURNAL(FUNCTION_NAME, START_TIME, END_TIME, DURATION_SEC, STATUS, ERROR_MESSAGE)
        VALUES (P_FUNCTION_NAME, P_START_TIME, P_END_TIME,
                EXTRACT(SECOND FROM (P_END_TIME - P_START_TIME)) +
                60 * EXTRACT(MINUTE FROM (P_END_TIME - P_START_TIME)) +
                3600 * EXTRACT(HOUR FROM (P_END_TIME - P_START_TIME)),
                P_STATUS, P_ERROR_MESSAGE);
        COMMIT; -- Commit the autonomous transaction
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END LOG_ACTION;

    -- This procedure displays the information of students based on the section code and academic year.
    PROCEDURE SHOW_STUDENTS_INFO(P_SECTION_CODE IN NUMBER, P_YEAR IN NUMBER) IS
        V_START TIMESTAMP := SYSTIMESTAMP;
        V_END   TIMESTAMP;
    BEGIN
        PKG_VALIDATIONS.VALIDATE_STUDENTS_INFO(P_SECTION_CODE, P_YEAR);
        FOR REC IN (
            SELECT * FROM VIEW_STUDENTS_INFO WHERE COD_SECTIA = P_SECTION_CODE AND AN_STUDIU = P_YEAR)
            LOOP
                DBMS_OUTPUT.PUT_LINE('NAME: ' || REC.NUME || ' ' || REC.PRENUME ||
                                     ', SECTION: ' || REC.COD_SECTIA ||
                                     ', YEAR: ' || REC.AN_STUDIU ||
                                     ', GROUP: ' || REC.GRUPA ||
                                     ', AVERAGE: ' || REC.MEDIA);
            END LOOP;

        V_END := SYSTIMESTAMP;
        LOG_ACTION('SHOW_STUDENTS_INFO', V_START, V_END, 'SUCCESS', NULL);
    EXCEPTION
        WHEN OTHERS THEN
            V_END := SYSTIMESTAMP;
            LOG_ACTION('SHOW_STUDENTS_INFO', V_START, V_END, 'ERROR', SQLERRM);
            RAISE;
    END SHOW_STUDENTS_INFO;

    -- This procedure displays the average information of students based on the section name and group.
    PROCEDURE SHOW_AVERAGE_INFO(P_SECTION_NAME IN VARCHAR2, P_GROUP IN VARCHAR2) IS
        V_START TIMESTAMP := SYSTIMESTAMP;
        V_END   TIMESTAMP;
    BEGIN
        PKG_VALIDATIONS.VALIDATE_AVERAGE_INFO(P_SECTION_NAME, P_GROUP);
        FOR REC IN (
            SELECT * FROM VIEW_AVERAGE_STUDENTS WHERE DENUMIRE_SECTIA = P_SECTION_NAME AND GRUPA = P_GROUP)
            LOOP
                DBMS_OUTPUT.PUT_LINE('NAME: ' || REC.NUME || ' ' || REC.PRENUME ||
                                     ', GROUP: ' || REC.GRUPA ||
                                     ', AVG: ' || REC.MEDIA ||
                                     ', SECTION AVG: ' || REC.MEDIE_SECTIE ||
                                     ', VARIANCE: ' || REC.VARIANTA ||
                                     ', POSITION: ' || REC.POZ_STUDENT);
            END LOOP;

        V_END := SYSTIMESTAMP;
        LOG_ACTION('SHOW_AVERAGE_INFO', V_START, V_END, 'SUCCESS', NULL);
    EXCEPTION
        WHEN OTHERS THEN
            V_END := SYSTIMESTAMP;
            LOG_ACTION('SHOW_AVERAGE_INFO', V_START, V_END, 'ERROR', SQLERRM);
            RAISE;
    END SHOW_AVERAGE_INFO;

    -- This procedure displays the top 3 students by average in a specific group.
    PROCEDURE SHOW_TOP3_BY_GROUP(P_GROUP IN VARCHAR2, P_MIN_AVERAGE IN NUMBER) IS
        V_START TIMESTAMP := SYSTIMESTAMP;
        V_END   TIMESTAMP;
    BEGIN
        PKG_VALIDATIONS.VALIDATE_TOP3_BY_GROUP(P_GROUP, P_MIN_AVERAGE);
        FOR REC IN (
            SELECT * FROM VIEW_TOP_3_STUDENTS WHERE GRUPA = P_GROUP AND MEDIA >= P_MIN_AVERAGE)
            LOOP
                DBMS_OUTPUT.PUT_LINE('NAME: ' || REC.NUME || ' ' || REC.PRENUME ||
                                     ', GROUP: ' || REC.GRUPA ||
                                     ', AVERAGE: ' || REC.MEDIA);
            END LOOP;

        V_END := SYSTIMESTAMP;
        LOG_ACTION('SHOW_TOP3_BY_GROUP', V_START, V_END, 'SUCCESS', NULL);
    EXCEPTION
        WHEN OTHERS THEN
            V_END := SYSTIMESTAMP;
            LOG_ACTION('SHOW_TOP3_BY_GROUP', V_START, V_END, 'ERROR', SQLERRM);
            RAISE;
    END SHOW_TOP3_BY_GROUP;
END PKG_STUDENT_UTILS;

BEGIN
    PKG_STUDENT_UTILS.SHOW_STUDENTS_INFO(P_SECTION_CODE => 22, P_YEAR => 2);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

BEGIN
    PKG_STUDENT_UTILS.SHOW_AVERAGE_INFO(P_SECTION_NAME => 'Matematica-Informatica - linia de studiu romana', P_GROUP => '332       ');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

BEGIN
    PKG_STUDENT_UTILS.SHOW_TOP3_BY_GROUP(P_GROUP => '943       ', P_MIN_AVERAGE => 8.5);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

SELECT * FROM LOG_JURNAL ORDER BY ID DESC;