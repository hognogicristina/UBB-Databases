CREATE OR REPLACE PACKAGE PKG_VALIDATIONS AS
    PROCEDURE VALIDATE_STUDENTS_INFO(P_SECTION_CODE IN NUMBER, P_YEAR IN NUMBER);
    PROCEDURE VALIDATE_AVERAGE_INFO(P_SECTION_NAME IN VARCHAR2, P_GROUP IN VARCHAR2);
    PROCEDURE VALIDATE_TOP3_BY_GROUP(P_GROUP IN VARCHAR2, P_MIN_AVERAGE IN NUMBER);
END PKG_VALIDATIONS;

CREATE OR REPLACE PACKAGE BODY PKG_VALIDATIONS AS
    PROCEDURE VALIDATE_STUDENTS_INFO(P_SECTION_CODE IN NUMBER, P_YEAR IN NUMBER) IS
        V_EXISTS_SECTION_CODE NUMBER;
        V_EXISTS_YEAR NUMBER;
    BEGIN
        IF P_SECTION_CODE IS NULL THEN
            RAISE_APPLICATION_ERROR(-20001, 'SECTION CODE CANNOT BE NULL');
        END IF;

        IF NOT REGEXP_LIKE(P_SECTION_CODE, '^\d+(\.\d+)?$') THEN
            RAISE_APPLICATION_ERROR(-20011, 'SECTION CODE MUST BE NUMERIC');
        END IF;

        IF P_YEAR IS NULL THEN
            RAISE_APPLICATION_ERROR(-20002, 'YEAR CANNOT BE NULL');
        END IF;

        IF NOT REGEXP_LIKE(P_YEAR, '^[1-4]$') THEN
            RAISE_APPLICATION_ERROR(-20012, 'YEAR MUST BE BETWEEN 1 AND 4');
        END IF;

        SELECT COUNT(*) INTO V_EXISTS_SECTION_CODE FROM VIEW_STUDENTS_INFO WHERE COD_SECTIA = P_SECTION_CODE;
        IF V_EXISTS_SECTION_CODE = 0 THEN
            RAISE_APPLICATION_ERROR(-20020, 'SECTION CODE ' || P_SECTION_CODE || ' DOES NOT EXIST');
        END IF;

        SELECT COUNT(*) INTO V_EXISTS_YEAR FROM VIEW_STUDENTS_INFO WHERE AN_STUDIU = P_YEAR;
        IF V_EXISTS_YEAR = 0 THEN
            RAISE_APPLICATION_ERROR(-20021, 'YEAR ' || P_YEAR || ' DOES NOT EXIST');
        END IF;
    END VALIDATE_STUDENTS_INFO;

    PROCEDURE VALIDATE_AVERAGE_INFO(P_SECTION_NAME IN VARCHAR2, P_GROUP IN VARCHAR2) IS
        V_EXISTS_SECTION_NAME NUMBER;
        V_EXISTS_GROUP NUMBER;
    BEGIN
        IF P_GROUP IS NULL OR TRIM(P_SECTION_NAME) = '' THEN
            RAISE_APPLICATION_ERROR(-20003, 'GROUP NAME CANNOT BE NULL OR EMPTY');
        END IF;

        IF P_SECTION_NAME IS NULL OR TRIM(P_SECTION_NAME) = '' THEN
            RAISE_APPLICATION_ERROR(-20004, 'SECTION NAME CANNOT BE NULL OR EMPTY');
        END IF;

        SELECT COUNT(*) INTO V_EXISTS_SECTION_NAME FROM VIEW_STUDENTS_INFO WHERE DENUMIRE_SECTIA = P_SECTION_NAME;
        IF V_EXISTS_SECTION_NAME = 0 THEN
            RAISE_APPLICATION_ERROR(-20022, 'SECTION NAME ' || P_SECTION_NAME || ' DOES NOT EXIST');
        END IF;

        SELECT COUNT(*) INTO V_EXISTS_GROUP FROM VIEW_STUDENTS_INFO WHERE GRUPA = P_GROUP;
        IF V_EXISTS_GROUP = 0 THEN
            RAISE_APPLICATION_ERROR(-20023, 'GROUP ' || P_GROUP || ' DOES NOT EXIST');
        END IF;
    END VALIDATE_AVERAGE_INFO;

    PROCEDURE VALIDATE_TOP3_BY_GROUP(P_GROUP IN VARCHAR2, P_MIN_AVERAGE IN NUMBER) IS
        V_EXISTS_GROUP NUMBER;
        V_EXISTS_MIN_AVERAGE NUMBER;
    BEGIN
        IF P_GROUP IS NULL OR TRIM(P_GROUP) = '' THEN
            RAISE_APPLICATION_ERROR(-20003, 'GROUP NAME CANNOT BE NULL OR EMPTY');
        END IF;

        IF P_MIN_AVERAGE IS NULL OR P_MIN_AVERAGE < 0 OR P_MIN_AVERAGE > 10 THEN
            RAISE_APPLICATION_ERROR(-20005, 'MINIMUM AVERAGE MUST BE BETWEEN 0 AND 10');
        END IF;

        SELECT COUNT(*) INTO V_EXISTS_GROUP FROM VIEW_STUDENTS_INFO WHERE GRUPA = P_GROUP;
        IF V_EXISTS_GROUP = 0 THEN
            RAISE_APPLICATION_ERROR(-20024, 'GROUP ' || P_GROUP || ' DOES NOT EXIST');
        END IF;

        SELECT COUNT(*) INTO V_EXISTS_MIN_AVERAGE FROM VIEW_STUDENTS_INFO WHERE MEDIA >= P_MIN_AVERAGE;
        IF V_EXISTS_MIN_AVERAGE = 0 THEN
            RAISE_APPLICATION_ERROR(-20025, 'NO STUDENTS WITH AVERAGE GREATER THAN OR EQUAL TO ' || P_MIN_AVERAGE);
        END IF;
    END VALIDATE_TOP3_BY_GROUP;
END PKG_VALIDATIONS;
